// <auto-generated />
using System;
using DataAcsessLayer.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAcsessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("BrandStatus")
                        .HasColumnType("boolean");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("EntityLayer.Models.CarImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarImages");
                });

            modelBuilder.Entity("EntityLayer.Models.Cars", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("CarDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CarStatus")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("KiloMetre")
                        .HasColumnType("integer");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("CarId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ModelId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("EntityLayer.Models.Expertise", b =>
                {
                    b.Property<int>("ExpertiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExpertiseId"));

                    b.Property<int>("ArkaTampon")
                        .HasColumnType("integer");

                    b.Property<int>("ArkaTamponStatusPieceId")
                        .HasColumnType("integer");

                    b.Property<int>("BagajStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("KaputStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("OnTamponDurum")
                        .HasColumnType("integer");

                    b.Property<int>("OnTamponStatusPieceId")
                        .HasColumnType("integer");

                    b.Property<int>("SagArkaCamurlukStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SagArkaKapıStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SagOnCamurlukStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SagOnKapıStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SolArkaCamurlukStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SolArkaKapıStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SolOnCamurlukStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SolOnKapıStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TavanStatusId")
                        .HasColumnType("integer");

                    b.HasKey("ExpertiseId");

                    b.HasIndex("ArkaTamponStatusPieceId");

                    b.HasIndex("BagajStatusId");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.HasIndex("KaputStatusId");

                    b.HasIndex("OnTamponStatusPieceId");

                    b.HasIndex("SagArkaCamurlukStatusId");

                    b.HasIndex("SagArkaKapıStatusId");

                    b.HasIndex("SagOnCamurlukStatusId");

                    b.HasIndex("SagOnKapıStatusId");

                    b.HasIndex("SolArkaCamurlukStatusId");

                    b.HasIndex("SolArkaKapıStatusId");

                    b.HasIndex("SolOnCamurlukStatusId");

                    b.HasIndex("SolOnKapıStatusId");

                    b.HasIndex("TavanStatusId");

                    b.ToTable("Expertises");
                });

            modelBuilder.Entity("EntityLayer.Models.Models", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModelId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ModelStatus")
                        .HasColumnType("boolean");

                    b.HasKey("ModelId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("EntityLayer.Models.PieceStatus", b =>
                {
                    b.Property<int>("PieceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PieceId"));

                    b.Property<string>("PieceStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PieceId");

                    b.ToTable("PieceStatuses");
                });

            modelBuilder.Entity("EntityLayer.Models.CarImage", b =>
                {
                    b.HasOne("EntityLayer.Models.Cars", "Car")
                        .WithMany("CarImages")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("EntityLayer.Models.Cars", b =>
                {
                    b.HasOne("EntityLayer.Models.Brand", "Brand")
                        .WithMany("Cars")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.Models", "Models")
                        .WithMany("Cars")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Models");
                });

            modelBuilder.Entity("EntityLayer.Models.Expertise", b =>
                {
                    b.HasOne("EntityLayer.Models.PieceStatus", "ArkaTamponStatus")
                        .WithMany()
                        .HasForeignKey("ArkaTamponStatusPieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.PieceStatus", "BagajStatus")
                        .WithMany()
                        .HasForeignKey("BagajStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.Cars", "Car")
                        .WithOne("Expertise")
                        .HasForeignKey("EntityLayer.Models.Expertise", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.PieceStatus", "KaputStatus")
                        .WithMany()
                        .HasForeignKey("KaputStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.PieceStatus", "OnTamponStatus")
                        .WithMany()
                        .HasForeignKey("OnTamponStatusPieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.PieceStatus", "SagArkaCamurlukStatus")
                        .WithMany()
                        .HasForeignKey("SagArkaCamurlukStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.PieceStatus", "SagArkaKapıStatus")
                        .WithMany()
                        .HasForeignKey("SagArkaKapıStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.PieceStatus", "SagOnCamurlukStatus")
                        .WithMany()
                        .HasForeignKey("SagOnCamurlukStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.PieceStatus", "SagOnKapıStatus")
                        .WithMany()
                        .HasForeignKey("SagOnKapıStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.PieceStatus", "SolArkaCamurlukStatus")
                        .WithMany()
                        .HasForeignKey("SolArkaCamurlukStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.PieceStatus", "SolArkaKapıStatus")
                        .WithMany()
                        .HasForeignKey("SolArkaKapıStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.PieceStatus", "SolOnCamurlukStatus")
                        .WithMany()
                        .HasForeignKey("SolOnCamurlukStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.PieceStatus", "SolOnKapıStatus")
                        .WithMany()
                        .HasForeignKey("SolOnKapıStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Models.PieceStatus", "TavanStatus")
                        .WithMany()
                        .HasForeignKey("TavanStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArkaTamponStatus");

                    b.Navigation("BagajStatus");

                    b.Navigation("Car");

                    b.Navigation("KaputStatus");

                    b.Navigation("OnTamponStatus");

                    b.Navigation("SagArkaCamurlukStatus");

                    b.Navigation("SagArkaKapıStatus");

                    b.Navigation("SagOnCamurlukStatus");

                    b.Navigation("SagOnKapıStatus");

                    b.Navigation("SolArkaCamurlukStatus");

                    b.Navigation("SolArkaKapıStatus");

                    b.Navigation("SolOnCamurlukStatus");

                    b.Navigation("SolOnKapıStatus");

                    b.Navigation("TavanStatus");
                });

            modelBuilder.Entity("EntityLayer.Models.Brand", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("EntityLayer.Models.Cars", b =>
                {
                    b.Navigation("CarImages");

                    b.Navigation("Expertise");
                });

            modelBuilder.Entity("EntityLayer.Models.Models", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
